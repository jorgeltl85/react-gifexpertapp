{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","addCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","console","log","trim","length","cats","handleSubmit","type","value","onChange","target","handleInputChange","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","ims","GifExpertApp","categories","cat","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAoC,EAAlCC,YAAmC,IAAtBC,EAAqB,EAArBA,cAAqB,EACzBC,mBAAS,IADgB,mBACvDC,EADuD,KAC3CC,EAD2C,KAuB/D,OACC,sBAAMC,SAAW,SAACC,GAAD,OAhBG,SAACA,GAGfA,EAAEC,iBACFC,QAAQC,IAAI,iBAGTN,EAAWO,OAAOC,OAAO,IAExBV,GAAc,SAACW,GAAD,OAAYT,GAAZ,mBAA2BS,OACzCR,EAAc,KAMDS,CAAaP,IAApC,SACC,uBAAOQ,KAAK,OACHC,MAAOZ,EACPa,SAAU,SAACV,GAAD,OAxBK,SAACA,GAC1BE,QAAQC,IAAIH,EAAEW,OAAOF,OACrBX,EAAcE,EAAEW,OAAOF,OAsBIG,CAAkBZ,S,uBC9BlCa,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DAEH,mCACA,WACF,GACRC,EALa,UAGH,WAHG,0CAKsCC,UAAWH,GALjD,kBAIL,GAJK,oBAEH,oCAFG,SAOAI,MAAOF,GAPP,cAObG,EAPa,gBAQEA,EAAKC,OARP,uBAQZC,EARY,EAQZA,KAEDC,EAAOD,EAAKE,KAAM,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAMF,EAAIE,MACVV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAdvB,kBAoBZM,GApBY,4CAAH,sDCEPO,EAAc,SAAC,GAAc,IAAXL,EAAU,EAAVA,IAEnBC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,MAAOV,EAASQ,EAATR,IAGnB,OADAd,QAAQC,IAAI,uCAAqCsB,EAAIC,EAAOV,GAExD,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCNCO,EAAU,SAAC,GAAkB,IAAfnB,EAAc,EAAdA,SAAc,ECDb,SAAEA,GAAe,IAAD,EACdlB,mBAAS,CAC/ByB,KAAK,GACLa,SAAQ,IAH4B,mBACjCC,EADiC,KAC1BC,EAD0B,KAmBxC,OAZAC,qBAAU,WAENxB,EAASC,GACRwB,MAAM,SAAAC,GACHH,EAAU,CACNf,KAAKkB,EACLL,SAAQ,SAIjB,CAAEpB,IAEEqB,EDhByBK,CAAc1B,GAAjCa,EAFwB,EAE7BN,KAAaa,EAFgB,EAEhBA,QAErB,OACI,qCACI,qBAAIJ,UAAU,yCAAd,cAA0DhB,EAA1D,OACEoB,GAAW,mBAAGJ,UAAU,wCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAIGH,EAAOJ,KAAK,SAAAkB,GAAG,OACZ,cAAC,EAAD,CAA0BjB,IAAKiB,GAAbA,EAAIhB,aEd5BiB,EAAe,WAE3B,IAFiC,EAIK9C,mBAFf,CAAE,cAFQ,mBAIzB+C,EAJyB,KAIbhD,EAJa,KAsBjC,OACC,gCACC,8CACA,uBAGA,cAAC,EAAD,CAAaD,YAAa,SAACkD,GAAD,OAX3BjD,GAAc,SAACW,GAAD,4BAAeA,GAAf,CAAqB,0BAEnCJ,QAAQC,IAAIwC,IAS0ChD,cAAe,SAACiD,GAAD,OAASjD,EAAciD,MAC3F,uBACA,6BAEaD,EAAWpB,KAAI,SAACT,GAAD,OACX,cAAC,EAAD,CAEIA,SAAaA,GADPA,Y,MChC9B+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.66a2b8b8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( {addCategory, setCategories } ) => {\n\tconst [ inputValue, setinputValue ] = useState(''); //en vez de undefine\n\n\tconst handleInputChange = (e) => {\n\t\tconsole.log(e.target.value);\n\t\tsetinputValue(e.target.value);\n\t};\n\n\tconst handleSubmit = (e) => {\n        //Evita que se envie todo el formulario y solo se ejecuta este codigo\n        //Por que en el momento de hacer un submit se refresca todo y se recarga\n        e.preventDefault();\n        console.log(\"Handle submit\")\n        //addCategory();\n        \n        if(inputValue.trim().length>2){\n\n            setCategories((cats) => [ inputValue, ...cats ]);\n            setinputValue('');\n        }\n\n    };\n\n\treturn (\n\t\t<form onSubmit={ (e)=> handleSubmit(e) }>\n\t\t\t<input type=\"text\" \n            value={inputValue} \n            onChange={(e) => handleInputChange(e)} />\n\t\t</form>\n\t);\n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\n\n","export const getGifs = async( category ) => {\n\n    const API_KEY = 'CAa16dQFCTdvbU0mAdMnxfiS1FbC3pnm';\n    const dominio = 'https://';\n    const limit = 10\n    const url = `${dominio}api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=${limit}&api_key=${API_KEY}`;\n        \n    const resp = await fetch (url);\n    const {data} = await resp.json();\n\n    const gifs = data.map ( img => {\n        return {\n            id: img.id,\n            title:img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    //console.log(\"--> El objeto mutado es\",gifs)\n    //setImages(gifs)\n    return gifs;\n}\n","import React from 'react'\n\nexport const GifGridItem = ( { img }) => {\n\n    const { id, title, url }  = img;\n\n    console.log(\"-->Lo que llego a GifGridItem es:\", id, title, url  )\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p> { title } </p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( { category}) => {\n\n    const { data:images, loading} = useFetchGifs( category );\n\n    return (\n        <>\n            <h3 className=\"card animate__animated animate__bounce\"> { category } </h3>\n            { loading && <p className=\"card animate__animated animate__flash\">Loading</p>}\n            \n             <div className=\"card-grid\">\n            {\n                // Si map no tiene return es un implisito\n                // tambien se le puede pasar { ...img }\n                images.map( ims => (\n                   <GifGridItem key={ims.id} img={ims} />\n                ))\n            }\n            </div> \n        </>\n    )\n}","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\"\n//Custom\nexport const useFetchGifs = ( category ) => {\n    const [state, setstate] = useState({\n        data:[],\n        loading:true\n    })\n\n    //un efecto no puede ser async\n    useEffect(() => {\n        \n        getGifs( category )\n        .then( imgs => {\n            setstate( {\n                data:imgs,\n                loading:false\n            });\n        });\n        \n    }, [ category ])\n\n    return state; // { data:[], loading: true }\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\t//const categoriesData = [ 'One Punch', 'Samurai X', 'Dragon Ball' ];\n\tconst categoriesData = [ 'One Punch' ];\n\n\tconst [ categories, setCategories ] = useState(categoriesData);\n\n\tconst addCategory = (e) => {\n\t\t//Esto no se hace, por que solo se asigna la referencia.\n\t\t//const categoriesA = categories;\n\n\t\t//Se debe hacer con un operador spread no asi debido a que no se puede mutar directamente\n\t\t//categoriesA.push('Los Enanos');\n\n\t\t//Opcion A con un operador spread\n\t\t//setCategories([...categories, 'Los Enanos']);\n\n\t\t//Opcion B con el callback\n\t\tsetCategories((cats) => [ ...cats, 'HunterXHunter' ]);\n\n\t\tconsole.log(categories);\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<h2>GifExpertApp</h2>\n\t\t\t<hr />\n\n\t\t\t{/* <button onClick={addCategory}>Agregar</button> */}\n\t\t\t<AddCategory addCategory={(cat) => addCategory(cat)} setCategories={(cat) => setCategories(cat)} />\n\t\t\t<hr />\n\t\t\t<ol>\n            {\n                categories.map((category) => (\n                    <GifGrid \n                        key={ category }\n                        category = { category } \n                    />\n                ))\n            }\n            </ol>\n\t\t</div>\n\t);\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}